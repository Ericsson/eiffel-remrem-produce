/*
 Copyright 2017 Ericsson AB.
 For a full list of individual contributors, please see the commit history.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
plugins {
    id 'war'
    id 'jacoco' // provides code coverage metrics for Java code via integration with Jacoco
}

//This task creates the executable service war
war {
    baseName = 'publish-service'
    manifest {
        attributes('Main-Class': 'com.ericsson.eiffel.remrem.publish.service.App')
        attributes('remremVersionKey': 'serviceVersion')
        attributes('serviceVersion': version)
    }
}

//JacocoReport task can be used to generate code coverage reports in different formats
jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
        html.destination "${buildDir}/jacocoHtml"
   }
    executionData = files('build/jacoco/jacocoTest.exec', 'build/jacoco/test.exec')
}

configurations {
    providedRuntime
    provided

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

//Assembles all the archives in the project.
install.dependsOn assemble

task integrationTest(type: Test) {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/classes/integrationTest")
    }

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

//Declare the dependencies for this project and test code
dependencies {
    compile project(':publish-common')
    compile('com.jayway.restassured:rest-assured:2.9.0')
    //ServletException requires compile time servlet dependency but it causes problems
    //when deployed if exist on war run time.. hence provided but also compileOnly
    compileOnly("org.springframework.boot:spring-boot-starter-tomcat")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    testCompile("org.springframework.boot:spring-boot-starter-tomcat")
        
}