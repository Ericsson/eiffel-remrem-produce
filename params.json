{
  "name": "Eiffel RemRem Publish Service",
  "tagline": "",
  "body": "# RemRem Publish\r\n\r\nRemRem Publish is a microservice allowing sending of messages to a topic based exchange on a RabbitMQ Server. It has an endPoint that must be called \r\n[a relative link](producer/msg)\r\n\r\n***\r\n## Compatibility\r\n* JDK8\r\n* Tomcat 7\r\n\r\n***\r\n## How to Install?\r\nBinary is relased via jitPack and latest version can be accessed via \r\n[Latest Version Binary](https://jitpack.io/com/github/Ericsson/eiffel-remrem-publish/0.1.2/eiffel-remrem-publish-0.1.2.war)\r\n\r\nRemRem Publish microservice in this repository are licensed under the [Apache License 2.0](https://raw.githubusercontent.com/ericsson/eiffel-remrem-publish/master/LICENSE).\r\n\r\n***\r\n## How to use?\r\n\r\n### Configuration\r\nTwo parameters need to be provided to start the service:\r\n* rabbitmq.exchange.name (String)\r\n* rabbitmq.host (String)\r\n\r\nFor **stand-alone** deployment, the library can be utilized like this:\r\n\r\n    java -Drabbitmq.host=127.0.0.1 -Drabbitmq.exchange.name=eiffel.poc -jar eiffel-remrem*\r\n\r\n\r\nBinary comes in War format which allows easy deployment in application servers such as Tomcat. In that case, these parameters must be provided to java process running tomcat. You can also provide them in the `WEB-INF/classes/application.yml` file.\r\n\r\n\r\n### REST methods\r\n\r\nThe service works on the following URL: `/producer/msg` and supports only POST requests.\r\n\r\nYou have to specify the [routing key](https://www.rabbitmq.com/tutorials/tutorial-four-java.html) using `rk` URL parameter.\r\n\r\nThe request's body should contain a **JSON Array** with your messages.\r\n\r\n\r\n***\r\n## Testing\r\n\r\nYou can use command-line tools like [curl](https://en.wikipedia.org/wiki/CURL) or some plugin for your favorite browser. For example:\r\n* [Postman](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop) for Chromium based browsers\r\n* [HttpRequester](https://addons.mozilla.org/en-US/firefox/addon/httprequester/) for Firefox\r\n\r\n### A few examples with `curl`:\r\n\r\n**One message:**\r\n\r\n    $ curl -H \"Content-Type: application/json\" -X POST -d '[\"test\"]' http://localhost:8080/producer/msg?rk=test\r\n\r\n    Result: [\"succeed\"]\r\n\r\n**Two messages/objects:**\r\n\r\n    $ curl -H \"Content-Type: application/json\" -X POST -d '[{\"key\":\"value1\"}, {\"key\":\"value2\"}]' http://localhost:8080/producer/msg?rk=test\r\n\r\n    Result: [\"succeed\",\"succeed\"]\r\n\r\nYou can open the RabbitMQ's management console and find these messages in a queue.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}